##Couple of basic syntaxes

1.source "File path"  -> similar to include other scripts in the current script. Similar to c include

2.set variable_name variable_value -> to create a variable and assign it a Value
  set variable_name -> returns the value of the variable.
  set defines a variable both locally and globally.
  To define a varaible locally(current namespce) use variable 
  variable var_name var_val -> creates a variable in current namespace
  > when trying to access a variable set always take the global value
  > when creating a new variable set creates in current namespace
  > accessing using set after a variable is created using variable, here set points to current namespace, even if global value exists
    varirable var_name var_value
    set var_name
  > variables within procedures have local scope
  
  set result up
  if up is not defined earlier value of result will be up

3.global variable_name -> to use a variable defined globally, variable name binds to the global variable of the same name

4.Procedure definition : Procedures are defined as follows here args is a list of paramters passed to it.
    proc proc_name { args }{
  
    }
    or it can also be like this 
    
    proc proc_name {arg1 args}{
    
    }
    
    any extra argument passed to the procedure are saved in the args as list
    
5.procedure call consists of name of the function followed by the arguments
  proc_name arg1 arg2 arg3 ...
  
6.Variables are substituted in a string with a $ preceding their names. -> $variable_name

7. if block
    
    if { condition }{
    
    }
    
8[E]. strace level - an expect command to tp trace calls. level indiciates the dept hof the call stack to trace 

9. [ script ] - embeds a script to be evalutated, whose result is substituted.

10.String operations- Many different ways exist for string comparision

   >string compare $val "something"  -> true if value is zero, -1/1 based on lexicographic comparsion, can use additional flags to give lenth to compare and ignore case

11[E].Spawn program args - creates a new process running program args , returns the unix process id or 0 is program is not started. 
      Process started by spawn sets the spawn_id , the process referred by spawn_id is called the current_process.
      The process is stopped using close

12. file - is a built in command to manipulate file names and attributes.
   > file tail $name -> returns all the character from last file system component of the val
   > file join $name1 $name2
   
13[E] send_log string - similar to send, sends string to a log_file, ignored if no log file is open

14[E] send string - sends a string to the running process

15[E] log_file [args] -a file - logs into file if name is given, stopes loggining if no oarguemnts are provided.By defaut appends to the file.

16.eval - evaluates a Tcl script

17. open filename [access] [permissions]- opens a file, serial port or command pipeline and returns a channel identifier
    >open filename w+
    
18. fconfigure channelid [name] [value]-set and get options on a channel
    >fconfigure $channelid -buffering line  - flushes everytime a new line is output
    
    what is a standard channel?
    
19 . puts - writes to a channel channel
      >puts channelid string -> write to channel given by channel id
      >puts string -> writes to standard output
      
      Note - any scripts in the string are evaluated and then written

20[E]. timestamp - returns a timestamp, with no arguments returns time since epoch
       >timestamp -format %c - format flag options determines the formatting of the time. 

21. incr - increments the contents of a variable
    incr x -> adds 1
    incr x 10 -> adds 10 to x
    incr x $y -> adds contents of y to x
    incr x 0 -> adds nothings, helpful in error checking
22[E].exp_continue - resets the timeout timer to zero and continues execution of the expect block

23.concat arg1 arg2 -> joins the arguments togather with spaces by removing leading and trailing spaces

24.llength - count the number of elements in a list

25.lindex list?  index?- retrieve an element from the list, index can be 0 or more
  
    lindex $args 0
    lindex $args end
    
26[E]. expect - programmed dialogue for interactive programs. waits until matches a pattern or timeout occurs or eof.
       pattern can be tcl style glob patterns or regexp. Executes the block which matches any of the mentiones criteria.
       Expect has many commands and flags.
       flags help control the execution flow.
       -re flag is used to match regex pattern
       -exact for exact matching
       " " - for glob style matching
       common commands - timeout, eof
27. string range $stringname fist last- get the substring of the string marked by the indexes given

    string range $reg $first end
    
28[E].close - Closes the connection with the current process 

29[E].wait - waits until the spawned process terminates

30. close $channelid - closes the connection to the channel

31[E] exit - causes expect to exit

32. Arrays are variables/containers which will contain other variables.
    testarray is an array
    set testarray(v1) var1
    set testarray(v2) var2
    set newstr "Array elements are $testarray(v1), $testarray(v2)"
    
33. append var1 var2 - appends var2 to var1

34. catch {script} ?resultvarname ?optionsvarname - execute scripts and catch exceptional returns

35. switch - evaluate one of the multipule options. Had options to control the type of matching
    switch -glob -- $varaible{
      "*pat1*" {Some action}
       "pat2" -  -> fall through condition
       "pat3" { some action}
       default {}
    }
36. exec <script>

37[E]. sleep seconds -> causes script to sleep for seconds

38. while { condition }{

    }
    
39. If {condition} {
    }
    
40. for {set a 0} {$a < $somevar} {incr a}{
    }
    
41. 
    
    
       
  

 
